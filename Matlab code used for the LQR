A(1,1) = 0.013398626300059205;
	A(1,2) = -3.4946472080693964;
	A(1,3) = 1.7954516460396026;
	A(2,1) = 5.299830614469174e-4;
	A(2,2) = -0.1382308741606859;
	A(2,3) = 0.014203206730705647;
	A(3,1) = 32.93851038880617;
	A(3,2) = 0.0;
	A(3,3) = 0.0;
	B(1,1) = 0.005455397449864148;
	B(2,1) = 2.1578840823972614e-4;
	B(3,1) = 0.0;
	C(1,1) = 0.0;
	C(1,2) = 0.0;
	C(1,3) = 1.0;
	D(1,1) = 0.0;

% Check controllability and observability
ob = rank(obsv(A, C)); % Observability rank
co = rank(ctrb(A, B)); % Controllability rank

if ob < size(A, 1)
    disp('System is not observable.');
else
    disp('System is observable.');
end

if co < size(A, 1)
    disp('System is not controllable.');
else
    disp('System is controllable.');
end

% Define LQR weighting matrices
Q = diag([1,1e8 ,1e12]); % State weighting matrix (adjust based on priorities)
R = 2; % Control weighting matrix (tune to penalize control effort)

% Compute LQR gain
[F, P, eig_values] = lqr(A, B, Q, R);

% Display results
disp('LQR Gain Matrix (F):');
disp(F);

disp('Solution to Riccati Equation (P):');
disp(P);

disp('Closed-loop Eigenvalues:');
disp(eig_values);

% Simulate control input
% For a given state x(t):
x = [0; 0; 0]; % Example initial state
u = -F * x; % Control input
disp('Control Input u:');
disp(u);
